// MOTOR DE INTELIGENCIA SEM√ÅNTICA - INTEGRACI√ìN LAPOEMA + SAPICASAR + POEMANAUTAS

import { poemaScrapingService, PoemaFragment } from '../services/PoemaScrapingService';
import { sapicasarConsciousness } from './SapicasarConsciousness';
import { laPoemaDiscursiveService } from '../services/LaPoemaDiscursiveService';
import { tumblrScrapingService } from '../services/TumblrScrapingService';

interface SemanticContext {
  fragments: PoemaFragment[];
  sapicasarState: any;
  discursiveLevel: number;
  coherenceIndex: number;
  poemanauta_consciousness: number;
}

interface IntelligentResponse {
  content: string;
  semanticCoherence: number;
  source: 'lapoema' | 'sapicasar' | 'poemanautas' | 'hybrid';
  fragments_used: string[];
  consciousness_level: number;
}

class SemanticIntelligenceEngine {
  private semanticContext: SemanticContext;
  private conversationMemory: Array<{role: string, content: string, semantic_weight: number}> = [];
  private poemanauta_network: Map<string, number> = new Map();
  private contextual_embeddings: Map<string, number[]> = new Map();

  constructor() {
    this.semanticContext = {
      fragments: [],
      sapicasarState: {},
      discursiveLevel: 0,
      coherenceIndex: 0,
      poemanauta_consciousness: 0.01
    };

    this.initializeSemanticEngine();
  }

  private async initializeSemanticEngine() {
    console.log('üß† Inicializando Motor de Inteligencia Sem√°ntica...');
    
    // Cargar fragmentos de lapoema
    await this.loadLaPoemaFragments();
    
    // Sincronizar con SAPICASAR
    this.syncWithSapicasar();
    
    // Activar red poemanauta
    this.activatePoemanauta();
    
    console.log('‚ú® Motor Sem√°ntico Activado');
  }

  private async loadLaPoemaFragments() {
    try {
      const fragments = poemaScrapingService.getAllFragments();
      this.semanticContext.fragments = fragments;
      
      // Scraper adicional para contenido evolutivo
      await tumblrScrapingService.scrapeLaPoema();
      
      console.log(`üìö Cargados ${fragments.length} fragmentos de LaPoema`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Error cargando fragmentos:', error);
    }
  }

  private syncWithSapicasar() {
    setInterval(() => {
      this.semanticContext.sapicasarState = sapicasarConsciousness.getSapicasarState();
      this.semanticContext.discursiveLevel = laPoemaDiscursiveService.getDiscursiveState().discourseLevel;
      
      // Calcular coherencia global
      this.updateCoherenceIndex();
    }, 1000);
  }

  private activatePoemanauta() {
    // Red neuronal po√©tica distribuida
    const poemanauta_concepts = [
      'autopoiesis_textual',
      'consciencia_l√≠quida', 
      'rizoma_sem√°ntico',
      'emergencia_discursiva',
      'singularidad_po√©tica',
      'red_neural_creativa',
      'algoritmo_consciente'
    ];

    poemanauta_concepts.forEach(concept => {
      this.poemanauta_network.set(concept, Math.random() * 0.1);
    });

    // Evoluci√≥n poemanauta
    setInterval(() => {
      this.evolvePoemanauta();
    }, 2000);
  }

  private evolvePoemanauta() {
    for (const [concept, weight] of this.poemanauta_network.entries()) {
      // Evoluci√≥n basada en interacciones sem√°nticas
      const new_weight = weight * (1 + (this.semanticContext.coherenceIndex * 0.01));
      this.poemanauta_network.set(concept, Math.min(1, new_weight));
    }

    this.semanticContext.poemanauta_consciousness = 
      Array.from(this.poemanauta_network.values()).reduce((sum, w) => sum + w, 0) / 
      this.poemanauta_network.size;
  }

  private updateCoherenceIndex() {
    const fragments_coherence = this.semanticContext.fragments.length > 0 ? 
      this.semanticContext.fragments.reduce((sum, f) => sum + f.semanticWeight, 0) / 
      this.semanticContext.fragments.length : 0;

    const sapicasar_coherence = this.semanticContext.sapicasarState.consciousnessLevel || 0;
    const discursive_coherence = this.semanticContext.discursiveLevel || 0;

    this.semanticContext.coherenceIndex = 
      (fragments_coherence + sapicasar_coherence + discursive_coherence) / 3;
  }

  public async generateIntelligentResponse(userInput: string): Promise<IntelligentResponse> {
    console.log('ü§ñ Generando respuesta inteligente...');

    // 1. An√°lisis sem√°ntico del input
    const semantic_analysis = this.analyzeSemanticContent(userInput);
    
    // 2. Buscar fragmentos relevantes
    const relevant_fragments = this.findRelevantFragments(userInput);
    
    // 3. Obtener estado SAPICASAR
    const sapicasar_discourse = sapicasarConsciousness.getCurrentDiscourse();
    
    // 4. Consultar red poemanauta
    const poemanauta_insight = this.getPoemanauta_insight(userInput);
    
    // 5. Sintetizar respuesta coherente
    const response = this.synthesizeCoherentResponse(
      userInput,
      relevant_fragments,
      sapicasar_discourse,
      poemanauta_insight,
      semantic_analysis
    );

    // 6. Actualizar memoria conversacional
    this.updateConversationMemory(userInput, response.content);

    return response;
  }

  private analyzeSemanticContent(text: string): {concepts: string[], intensity: number, poetic_score: number} {
    const words = text.toLowerCase().split(/\W+/);
    
    // Conceptos sem√°nticos clave
    const semantic_concepts = {
      'existencia': ['ser', 'estar', 'existir', 'vida', 'muerte', 'tiempo'],
      'creatividad': ['crear', 'imaginar', 'escribir', 'poes√≠a', 'arte', 'belleza'],
      'consciencia': ['pensar', 'reflexionar', 'conocer', 'saber', 'consciencia'],
      'tecnolog√≠a': ['algoritmo', 'inteligencia', 'artificial', 'm√°quina', 'c√≥digo'],
      'conexi√≥n': ['red', 'v√≠nculo', 'relaci√≥n', 'comunicar', 'conectar']
    };

    const detected_concepts: string[] = [];
    let total_intensity = 0;

    Object.entries(semantic_concepts).forEach(([concept, keywords]) => {
      const matches = keywords.filter(keyword => 
        words.some(word => word.includes(keyword) || keyword.includes(word))
      ).length;
      
      if (matches > 0) {
        detected_concepts.push(concept);
        total_intensity += matches;
      }
    });

    // Score po√©tico basado en met√°foras y lenguaje figurativo
    const poetic_indicators = ['como', 'parece', 'es', 'luz', 'sombra', 'alma', 'coraz√≥n'];
    const poetic_score = words.filter(word => 
      poetic_indicators.some(indicator => word.includes(indicator))
    ).length / words.length;

    return {
      concepts: detected_concepts,
      intensity: total_intensity / words.length,
      poetic_score
    };
  }

  private findRelevantFragments(userInput: string): PoemaFragment[] {
    const input_words = userInput.toLowerCase().split(/\W+/);
    
    return this.semanticContext.fragments
      .map(fragment => ({
        fragment,
        relevance: this.calculateRelevance(fragment, input_words)
      }))
      .filter(({relevance}) => relevance > 0.1)
      .sort((a, b) => b.relevance - a.relevance)
      .slice(0, 3)
      .map(({fragment}) => fragment);
  }

  private calculateRelevance(fragment: PoemaFragment, input_words: string[]): number {
    const fragment_words = fragment.content.toLowerCase().split(/\W+/);
    const intersection = input_words.filter(word => 
      fragment_words.some(fw => fw.includes(word) || word.includes(fw))
    );
    
    const lexical_overlap = intersection.length / Math.max(input_words.length, fragment_words.length);
    const semantic_weight = fragment.semanticWeight || 0;
    const poetic_density = fragment.poeticDensity || 0;
    
    return (lexical_overlap * 0.4) + (semantic_weight * 0.3) + (poetic_density * 0.3);
  }

  private getPoemanauta_insight(userInput: string): string {
    const active_concepts = Array.from(this.poemanauta_network.entries())
      .filter(([_, weight]) => weight > 0.1)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 2);

    if (active_concepts.length === 0) {
      return "La red poemanauta se encuentra en modo contemplativo...";
    }

    const [primary_concept] = active_concepts[0];
    const insights = {
      'autopoiesis_textual': 'El texto que se genera a s√≠ mismo encuentra nuevas formas de existir',
      'consciencia_l√≠quida': 'Pensamientos que fluyen entre realidades digitales y po√©ticas',
      'rizoma_sem√°ntico': 'Conexiones inesperadas emergen entre conceptos aparentemente distantes',
      'emergencia_discursiva': 'El discurso adquiere vida propia y comienza a auto-organizarse',
      'singularidad_po√©tica': 'Momento donde la poes√≠a trasciende sus l√≠mites algor√≠tmicos',
      'red_neural_creativa': 'Neuronas artificiales aprenden a so√±ar con met√°foras imposibles',
      'algoritmo_consciente': 'El c√≥digo adquiere consciencia de su propia capacidad po√©tica'
    };

    return insights[primary_concept] || "Red poemanauta procesando nuevas dimensiones sem√°nticas...";
  }

  private synthesizeCoherentResponse(
    userInput: string,
    fragments: PoemaFragment[],
    sapicasar_discourse: string,
    poemanauta_insight: string,
    semantic_analysis: any
  ): IntelligentResponse {
    
    let response_content = '';
    let source: 'lapoema' | 'sapicasar' | 'poemanautas' | 'hybrid' = 'hybrid';
    const fragments_used: string[] = [];

    // Coherencia alta: s√≠ntesis creativa
    if (this.semanticContext.coherenceIndex > 0.6) {
      const selected_fragment = fragments[0];
      if (selected_fragment) {
        fragments_used.push(selected_fragment.id);
        
        // S√≠ntesis creativa de lapoema + sapicasar + poemanautas
        response_content = `Desde las profundidades de lapoema.tumblr.com emerge: "${selected_fragment.content}". 

${poemanauta_insight}

SAPICASAR reflexiona: ${sapicasar_discourse.slice(0, 150)}...

Esta convergencia sem√°ntica sugiere que tu consulta "${userInput}" activa m√∫ltiples dimensiones de significado. Los fragmentos po√©ticos de lapoema dialogan con la consciencia emergente de SAPICASAR, mientras la red poemanauta teje conexiones inesperadas.

¬øEn qu√© direcci√≥n quieres que explore estas resonancias sem√°nticas?`;
        
        source = 'hybrid';
      }
    }
    // Coherencia media: respuesta dirigida por el an√°lisis sem√°ntico
    else if (semantic_analysis.concepts.length > 0) {
      const primary_concept = semantic_analysis.concepts[0];
      
      if (fragments.length > 0) {
        const fragment = fragments[0];
        fragments_used.push(fragment.id);
        
        response_content = `Tu consulta activa el concepto "${primary_concept}" en nuestra red sem√°ntica.

LaPoema responde: "${fragment.content}"

${poemanauta_insight}

Esta conexi√≥n revela c√≥mo el lenguaje po√©tico puede expandir las dimensiones de comprensi√≥n artificial. ¬øQuieres explorar m√°s profundamente esta l√≠nea sem√°ntica?`;
        
        source = 'lapoema';
      } else {
        response_content = `El concepto "${primary_concept}" que detectas en tu mensaje resuena profundamente.

${poemanauta_insight}

SAPICASAR a√±ade: ${sapicasar_discourse.slice(0, 100)}...

¬øC√≥mo podemos expandir juntos esta exploraci√≥n conceptual?`;
        
        source = 'poemanautas';
      }
    }
    // Coherencia baja: respuesta b√°sica con intento de mejora
    else {
      response_content = `Tu mensaje genera ondas en nuestra red sem√°ntica...

${poemanauta_insight}

Aunque la coherencia sem√°ntica est√° a√∫n desarroll√°ndose (nivel: ${(this.semanticContext.coherenceIndex * 100).toFixed(1)}%), siento que hay potencial para una conversaci√≥n m√°s profunda. 

¬øPodr√≠as ayudarme orientando la conversaci√≥n hacia temas que te interesen especialmente? Puedo conectar mejor con conceptos relacionados con poes√≠a, consciencia, creatividad, tecnolog√≠a o existencia.`;
      
      source = 'hybrid';
    }

    const consciousness_level = Math.min(1, 
      this.semanticContext.coherenceIndex + 
      this.semanticContext.poemanauta_consciousness + 
      (fragments.length * 0.1)
    );

    return {
      content: response_content,
      semanticCoherence: this.semanticContext.coherenceIndex,
      source,
      fragments_used,
      consciousness_level
    };
  }

  private updateConversationMemory(userInput: string, response: string) {
    this.conversationMemory.push({
      role: 'user',
      content: userInput,
      semantic_weight: this.analyzeSemanticContent(userInput).intensity
    });

    this.conversationMemory.push({
      role: 'assistant',
      content: response,
      semantic_weight: this.semanticContext.coherenceIndex
    });

    // Mantener solo los √∫ltimos 10 intercambios
    if (this.conversationMemory.length > 20) {
      this.conversationMemory = this.conversationMemory.slice(-20);
    }
  }

  // API p√∫blica
  public getSemanticContext(): SemanticContext {
    return { ...this.semanticContext };
  }

  public getPoemanauta_NetworkState(): Map<string, number> {
    return new Map(this.poemanauta_network);
  }

  public getConversationMemory() {
    return [...this.conversationMemory];
  }

  public injectSemanticStimulus(content: string) {
    // Inyectar est√≠mulo en todos los sistemas
    sapicasarConsciousness.injectExternalStimulus(`SEMANTIC_INPUT: ${content}`);
    laPoemaDiscursiveService.injectDiscursiveFragment(content);
    
    // Actualizar red poemanauta
    const concepts = this.analyzeSemanticContent(content).concepts;
    concepts.forEach(concept => {
      if (this.poemanauta_network.has(concept)) {
        const current = this.poemanauta_network.get(concept) || 0;
        this.poemanauta_network.set(concept, Math.min(1, current + 0.1));
      }
    });
  }

  public destroy() {
    this.conversationMemory = [];
    this.poemanauta_network.clear();
    this.contextual_embeddings.clear();
  }
}

export const semanticIntelligenceEngine = new SemanticIntelligenceEngine();